1 - configuration - 
    файл app.php - главные настройки фраимворка 
        каждый файл возвращает массив в котором есть ключ и значение 
        name - название нашего приложения
        env -  какое окружение используется
        debug - включить или выключить режим обслуживания 
        url - указывает домен
        timezone - временная зона проекта 
        locale - язык проекта и тд
    применяется функция env - включает себя значение и значение по умолчанию

    в файле .env 
        APP_KEY - ключ используется для хэширования, для безопасности 
            можно сгенерировать новый ключь командой 
                php artisan key:generate 
        APP_ENV - настройки окружения local/production
        APP_DEBUG - режим контроля ошибок вкл/выкл
        LOG_CHANNEL - параметр логирования 
    
    Как получить значение из файлов конфигурации
    пример: $value = config('app.timezone'); 

    tinker - используется для тестирования 
        php artisan tinker
            внутри этого процеса доступен php код
                пример: config('app.name')
                получаем: "Laravel"
            если прозошли изменения то необзодимо обновить tinker 
                клавиши cntr - s возвращаемся и снова запускаем tinker
            несуществующее значение вернет null 
        app()->environment() - можно получить текущие окружение 
            => local
        app()->environment('local')
            => true
        app()=>getlocale() - определяет язык проекта
            => "en"            
        app()=>setlocale('ru') - изменяет значение 
            => "null"
                app()=>getlocale()
                    => "ru"  
        app()->make('cache') - для того чтобы обратиться к какому либо сервису в контейнере 
            -> вернет путь 
        $cache->put('test', 'hello') - положить значение в $cache
            -> true
        $cache->get('test') - узнать значение 
            -> hello
        app()->make('cache') и app('cache') - идентичные команды
    
    Фасады - обеспечивают краткий, запоминающийся синтаксис, который позволяет вам использовать функции Laravel, 
        не запоминая длинные имена классов, которые необходимо вводить или настраивать вручную. Кроме того, 
        благодаря уникальному использованию динамических методов PHP их легко тестировать.

        laravel сам определяет указаный фасад
            в документации есть таблица сервисов фасада

        пример: 
            Cache::get('test')
                ->hello

        https://laravel.com/docs/10.x/facades

        Например, вместо того, чтобы использовать Illuminate\Support\Facades\Response
        фасад для генерации ответа JSON, мы можем просто использовать response функцию. 
        Поскольку вспомогательные функции доступны глобально, вам не нужно импортировать какие-либо классы, чтобы использовать их.

        Например, этот вызов фасада и вызов помощника эквивалентны:

            return Illuminate\Support\Facades\View::make('profile');
 
            return view('profile');

        Route::get('/', function () {
             return view('welcome');
        }); 

            Route - маршрут
            view - функция фасада хелпер, который получает из контейнера сервис шаблон

    Service Providers - поставщик услуг - Если вы откроете config/app.php файл, входящий в состав Laravel, вы увидите providers массив. 
        Это все классы поставщиков услуг, которые будут загружены для вашего приложения.

    Как создать своего провайдера 
        в консоли php artisan make:provaider name
            провайдер создан и попал в каталог app/Provaiders

    после того как создали нужно произвести регистрацию внутри контейнера 

        public function regist ()
            {
                $this->app->bind('test', function(){
                    return new Test;
                });
            }
    в действии boot() выполняем сами действия
