Установка Open server
    1.  при утсановке отменить "программы для веб разработки"
    2.  обновить консоль Open server
    3.  В настройках выбрать актуальную версию Apache и PHP        
    4.  Выбрать актуальную версию MySql и Redis. БД и БД для файлов кэш. MySql --version
    5.  php --vеrsion и composer --version - обновить composer self-update если это необходимо
    6.  установка notejs версии 18.16.0 LTS. 
            1.  Во вкладке СЕРВЕР - настройка Path - свой Path + userdata/config/path.txt + Win Path
            2.  в папке C:\OSpane\userdata\config\ создаем path.txt, перезагружаем open server
            3.  открыть файл path.txt и добавить путь C:\Program Files\nodejs, перезагружаем open server
            4.  проверяем npm --version

Установка laravel
    1.  в консоли open server в папке /domains 
            выполняем команду composer create-project laravel/laravel projectname
    2.  проверяем установку Laravel в папке проекта projectname 
            cd projectname - php artisan --version 
    3.  в open server во вкладке Домены - ручное управление - указать название домена проекта projectname.test
    4.  Выбираем папку домена /domains/projectname/public
    5.  в консоли браузера вводим домен projectname.test, если запускается laravel, значит все работает

Установка БД
    1.  Входим в аккаунт phpMyAdmin пороль:root
    2.  создаем БД с названием проекта и выбираем кидировку utf8mb4_unicode_ci
    3.  Нужно указать параметры БД
            в файле проекта .env и в DB_DATABASE=projectname имя=root пароль=root 
    4.  в консоли проверяем подключение БД
            php artisan migrate
                Laravel создаст таблицы по ресурсам данным из коробки
            убедитесь что в php.ini раскоментирована строка extension=pdo_mysql
    






для проверки установки Laravel введи в терминале php artisan
php artisan serve - запускает сервер laravel
php artisan - пресудствуют команды

php artisan make:conroller -help - таким образом можно определить что выполняет команда
php artisan make:conroller - создает новый контроллер класс
make:controller [options] [--] <name> - у контроллера могут быть опции и имя 
    пример имени контроллера : MyPlaceController 


структура
HTTP строка => HTTP запрос(request) =>  route => controller => model
view <= conroller <= model <=> database


в папке route производятся get HTTP запросы route => web.php => api.php
контроллеры находятся в папке Http => Controllers

Миграции
    папка распаложена database => migrations
    миграции создаются командой 
php artisan make:migration name и 
    создаёт модель с миграцией и правильным названием переменых по конвенции 
    правильный шаблон
php artisan make:model name -m
    модели храняться в папке app => Models
    -m - сокращеный тип миграции


app - каталог апликейшен - основной каталог бизнес логики 
    php классы, модели, события и тд.
console - интерфейс для работы через консоль 
    файл Krnel.php - в нём выполняются консольные команды
Http - интерфейс для работы через браузер через http запросы
    есть корневой файл Kernel.php - в нем содержаться классы которые,
    обрабатывают наш запрос перед тем как он попадет в контроллер

bootstrap - app.php - с этого файла начинается вся работа фраиворка 
    В нём производится Illuminate\Foundation\Application
    и App\Http\Kernel::class и App\Console\Kernel::class
    запрос из браузера использует index.php
    запрос с консоли использует artisan файл

config - отвечает за конфигурацию 

database - файлы ждя работы с базой данных
    этот файл описывает базу данных 
    когда мы создаём таблицу, она попадает в папку migration
    seeders - заполнение тестовыми данными

public - содержит публичные файлы
    сюда помещаются файлы фронтент разработки 
    js файлы и тд
    htaccess — это конфигурационный файл веб-сервера Apache, позволяющий управлять работой веб-сервера и настройками сайта 
        с помощью различных параметров (директив) без изменения основного конфигурационного файла веб-сервера.
    favicon.ico — значок веб-сайта или веб-страницы. 
    Файл robots.txt - позволяет управлять сканированием веб-страниц в форматах,
        которые робот Googlebot может обработать 
        (он поддерживает, например, HTML или PDF, но не мультимедийные файлы).
        файл для работы индексации 
        Сначало идет поиск файла в папке, а потом уже в файле index.php

resources - здесь Шаблоны и все страницы css, js, views

route - маршруты - файлы маршрутов - доступ пользователя с приложением 
    web.php - маршруты для браузера 
        (маршруты публичные, для кабинета пользователя, маршруты для админки)
    api.php - мршруты для api
    console.php -  маршруты для командной строки 
    channels.php - отвечает за web сокет(транслировать web сокет каналы)
        доступ пользователя

storage - хранилище 
    app - файлы которые не видны пользователю 
        public - файлы которые загружаются пользователем. 
        например: avatar
    framework - Laravel хранит свои файлы - технический каталог фраиворка
        кэш, скомпелированные шаблоны и тд
    logs - хранит все логи(ошибки)

tests - каталог для создания тестов 
    команда php artisan make:test name test
        в папке Feature создаеётся тест
            в тесте например можно отправится на главную страницу методом get 

vendor -  коталог который создаёт композер - менеджер пакетов, аналог пакетов на json
    сюда складываются все установленные пакеты

.editorconfig - параметры для редактора кода
    отступы, линиии и тд

.env - ОЧЕНЬ ВАЖНЫЙ ФАЙЛ! - этот файл скрыт в .gitignore 
    этот файл создаётся каждый раз когда мы открываем наше приложение 
    каждый раз меняеся в зависимости где развернуто наше приложение 

.env.example - шаблон из которого потом мы создаём .env 

.gitignore - файлы которые мы хотим скрыть

artisan - входная точка для консольных команд

composer.json - файл для установки пакетов зависимости php
    сюда будут записываться названия всех установленных пакетов в каталог vendor

composer.lock - указывает все зависимости версии которые установлены 
    чтобы потом на продакшн эти версии устанавливать

package.json - для пакетов js которые установлены через npm 

phpunit.xml - параметры для тестирования 

README.md - инструкция для разворачивания вашего приложения 

server.php - встроенный сервер laravel 
    php artisan serve

webpack.mix.js - нужен для настройки и сборки javaScript