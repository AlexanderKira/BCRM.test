
2 - Routing - Маршруты 
    Командой php artisan make:model name -mc
        создаём модель с маршрутом, которая делает миграцию и создаёт контроллер

    api.php и web.php
        регестрируются в app\Providers\RouteServiceProvider.php
            на api.php и web.php накладываются параметры и все действия маршрутов идентичны 
                web.php используется внутри приложения
                    например указываем для ссылок login 
                    страницы сайта и админку
                api.php используется внешними клиентами, мобильными приложениеями 

    Route::get('/', function(){
        ruturne view('welcome');
    });

        Route - фасад
        get - http запрос 
        '/' - корень главной страницы
        function(){ruturne view('welcome');} - это обработчик 

    но лучше создать контроллер и в нём указать код обработчика. 
    
    Route::view('/', 'welcome'); 

        в маршрут по которому нужно указать страницу данные лучше не указывать
    

    Редирект - redirect - направить клиента с одного маршрута на другой 

        Route::redirect('/home', '/');- с пути /home происходит переход на главную страницу welcome 

    Если есть неизвестный url путь можно применить fallback и перенаправить на нужную страницу вместо ошибки 404
        p.s fallback должен лежать в самом низу маршрутов 
        Route::fallback(function (){
            return 'Fallback';
        });

3 - Controllers - контроллеры

    
    Создаём через консоль контроллер в app\Http\Controllers\TestController.php
        команда php artisan make:controller TestController
    далее импортируем контроллер в routes\web.php
        use app\Http\Controllers\TestController;
    создаём маршрут в routes\web.php
        Route::get('test', TestController::class);
    если в строке браузера ввести /test, выполнится действие по классу TestController
        например:
            class TestController extends Controller{
                public function ___invoke() - по умолчанию
                    {
                        return 'test';
                    }
            }

    данные БД также называеют ресурсами 
        crud (create, read, update, delete) - аббревиатура обозначающая единсвеные действия которые можно совершать, 
            создавать, читать, добавлять, удалять. 
        https://laravel.com/docs/10.x/controllers#resource-controllers

        Путь ресурса принято писать во множественном числе
        Класс в контроллерах принято писать в единсвенном числе

        Один контроллер создается на один ресурс

        методы 
            GET - получить
            POST - создать
            
        Правила и действия, выполняемые контроллером ресурсов
            Verb	    URI	                        Action	  Route Name
            метод	    путь	                    действие  маршрут имя

            GET	        /photos	                    index	  photos.index - получить список фотографий на сайте
            GET	        /photos/create	            create	  photos.create - создать фотографии
            POST        /photos	                    store	  photos.store - создать пост 
            GET	        /photos/{photo id}	        show	  photos.show - просмотр одной фотографии
            GET	        /photos/{photo id}/edit	    edit	  photos.edit - страница редактирования поста
            PUT/PATCH	/photos/{photo id}	        update	  photos.update - обновить
            DELETE	    /photos/{photo id}	        destroy	  photos.destroy - удалить

        
    
        Создаём через консоль контроллер в app\Http\Controllers\PostController.php
            команда php artisan make:controller PostController
        Далее импортируем контроллер в routes\web.php
            use app\Http\Controllers\PostController;

        создаем маршруты контроллера PostController в routes\web.php
            Route::get('posts', [PostController::class, 'index'])->name('posts.index'); - получить список
            Route::get('posts/create', [PostController::class, 'create'])->name('posts.create'); - создать пост
            Route::post('posts/store', [PostController::class, 'store'])->name('posts.store'); - сохранить пост
            Route::get('/photos/{post}', [PostController::class, 'show'])->name('posts.show'); - показать пост
            Route::get('/photos/{post}/edit', [PostController::class, 'edit'])->name('posts.edit'); - редактирование
            Route::put('/photos/{post}', [PostController::class, 'update'])->name('posts.update'); - обновить
            Route::delete('/photos/{post}', [PostController::class, 'destroy'])->name('posts.destroy'); - удалить
            Route::post('/photos/{post}/like', [PostController::class, 'like'])->name('posts.like');

        в app\Http\Controllers\PostController.php создаем методы

            class PostController extends Controller
            {
                public function index(){
                    return 'страница список постов'
                }
                      
                public function create(){
                    return 'страница создания поста'
                }
                        
                public function store(){
                    return 'запрос создания поста'
                }
        
                public function show(){
                    return 'страница просмотра поста'
                }
                        
                public function edit(){
                    return 'страница изменения поста'
                }
                       
                public function update(){
                    return 'запрос изменения поста'
                }
            
                public function delete(){
                    return 'запрос удаления поста'
                }
            }

        кастомный метод

            class PostController extends Controller
            {
                public function like(){
                    return 'like + 1'
                }
            }

    для обычных ресурсов указанных и кроме кастомных можно использовать, это тоже самое

        Route::resource('posts', PostController::class);

    Можно исключить ненужные метод 

        Route::resource('posts', PostController::class)->only(['index', 'show']);

    можно создать контроллер в котором уже будут прописанны базовые методы resource с помощью команды
        php artisan make:controller PostController --resource

    показывает все зареганные маршруты    
        php artisan route:list

    как получить пост по id

        public function show($id){
                    return 'страница просмотра поста {$id}';
                }
        на странице получиться  
            страница просмотра поста 'число id введеное в url или из БД' 
    
    можно группировать маршруты

        Route::prefix('user')->as('user.')->group(function () {

            Route::get('posts', [PostController::class, 'index'])->name('posts.index'); 
            Route::get('posts/create', [PostController::class, 'create'])->name('posts.create');

        });

        префикс будет присваиваться ко всем названиям с приставкой user

    если кабинет пользователя большой, то можно вынести его в отдельный файл.
        для этого в routes/ создаем файл например user.php и заносим в него группу маршрутов.
            далее в app\Providers\RouteServiceProvider.php передаём 

                 Route::middleware('web')

                    ->namespace($this->namespace)

                    ->group(function(){ - функция обратного вызова

                        require_once base_path('routes/web.php');

                        require_once base_path('routes/user.php');
                    });
    
    дополнительные команды консоли для работы с маршрутами
        существование маршрута     
            Route::has('name')
                true/false
        существование пути или проверка активной ссылки
            Route::is('/posts*')
        команда в консоли для кэширования. Предназначена для увелечение скорости работы
            php artisan route:cashe
        для того чтобы очистить кэш
            php artisan route:clear
        страница входит/выходит в режим обслуживания
            php artisan down
            php artisan up



        

    


                
                    


            
            














        
    