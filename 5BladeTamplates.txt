Blade Tamplates - 
    название каталогов берутся из названия маршрутов 
для того чтобы blade заработал в названии также нужно написать 
    в resources\views\home создаем файл index.blade.php
        в файле маршрутов routes\web.php создаем маршрут
            Route::view('/', 'home.index')-.name('home');
    в файле index.blade.php создаётся html код
        в body можно использовать директивы
            <body>
                @php($foo = 'bar'); - внутри директивы пишем php код 
                @php
                    $foo = 'bar' - второй вариант синтаксиса
                @endphp - закрывающая директива
            </body>

        циклы 
            foreach 
                @foreach([1,2,3] as $value)
                    {{ $value }} - {{}} - интерполяция 
                @endforeach
            for
                @for($i = 0; $i<10; $i++)
                    {{$i}} - 10 итераций
                @endfor

        {{}} - внутри можно писать php код 
                htmlspecialchars - автоматически очищает html код от тегов для защиты от XSS атак
            {!!$value!!} - выведит значение как есть
            @{{}} - указвает blade игнорировать 
        
        @json() - переводит в формат json
            @json({'foo'=>'bar'})
                вывод -> {"foo":"bar"}

            <script>
                window.App = @json(['locale' => config('app.locale')]) - applocale - 'en' вывод языка проекта
            </script>
                преобразовывает php массивы в json

        @yield('content') - вывод содержимого с текстом 
        @extends('layout') - позволяет вывести значение 
            выводит значение layout, например как содержимое страницы и её html шаблон
    
    @include() - удобным вариантом будет создать шаблоны для повторяющихся частей body страницы для полезной сортировки 
        в каталоге resources\views\includes создаётся файл
            header.blade.php
                вставляем в файлы с контентом 
            в resources\views\home\index.blade.php
                импортируем путь 
                     @include('includes.header')
    
    view() - как спользовать глобальную функцию  
        в app\Http\Controllers\Posts\LoginController.php
            в функции контроллера
                public function index()
                    {
                        return view('login.index'); - возвращает страницу 
                    }

        из routes\PostsRoutes\register.php мы как бы берем название и 
            называем ею страницу \login\index.blade.php

    Базовый макет страницы - секция - @yield(),@extends(),@section().
        \layouts\base.blade.php - в этом файле будет хранится вся основная верстка, а контент будет подставлятся
            в main - для каждой страницы свой
                <main>
                    @yield('content')
                </main>
        \login\index.blade.php 
            @extends('layouts.base') - подключаем файл \layouts\base.blade.php
                @section('content') - создаём секцию с именем контента и ипортируем html код 
                    <h1>
                        Регистрация
                    </h1>
                @endsection


    URL Generation
        для передачи ссылки на страницу используется route()
            <a href="{{route('register')}}"> - указывается название маршрута 
                вход 
            </a>
    
    Как передать данные в шаблоны

        в app\Http\Controllers\Posts\BlogController.php

            return view('blog.index')->with($foo, 'bar'); - название и значение 

            или 

                return view('blog.index', [
                    'foo' => 'bar',
                    'baz' => [1,2,3],
                ]);

            или

                $posts = [1,2,3]
                return view('blog.index', compact('posts'))

        в resources\views\blog\index.blade.php
            <p>
                {{$foo}} - вывести 
            </p>
            
            в цикле
                @foreach($posts as $post)
                    <div>
                        {{$post}}
                    </div>
                @endforeach   

            если постов нет
                @if(empty($posts))
                    нет ни одного поста 
                @else
                    @foreach($posts as $post)
                        <div>
                            {{$post}}
                        </div>
                    @endforeach 
                @endif
        
        пример дынных из Базы данных
            в \routes\PostsRoutes\blog.php
                $post = (object) [
                    'id' => 123,
                    'title' => 'texttext'
                    'content' => 'texttexttexttext'
                ];
                $posts = array_fill(0, 10, $post);  - увеличивает количесво массивов с одинаковыми типовыми данными
                    Создать массив. 0 начальный индекс - 10 кол.элемен - значение содержимого
            в \blog\index.blade.php
                <a href="{{route("blog.show, $post->id")}}"> - как указать ссылку show на ресурс через id, просмотр ресурса
                        {{$post->title}} - таким способом выводятся данные из массива на страницу 
                </a>

    передать значение на все страницы сайта
        например в \resources\views\includes\footer.blade.php
            © {{config('app.name')}}{{date('Y')}} - знак копирайта NumLock - ALT+0169
        а как создать и расшарить свою переменную
            в app\Providers\AppServiceProvider.php
                в метаде boot
                     public function boot()
                        {
                            view()::share('date', '2022');
                        }
                а в \resources\views\includes\footer.blade.php
                    © {{config('app.name')}}{{$date}}  
                        $date наша созданная переменная которая доступна во всех страницах
        
        как создать переменую только на определеный участок сайта, например на кабинет user
            в app\Providers\AppServiceProvider.php - все маршруты user могут использовать 
                view::composer('user*', function($view){   
                    $view->with('balance', 12000);                          

                });


        
            
                



                 

        




        


